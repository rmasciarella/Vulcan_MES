name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"
  PNPM_VERSION: "9"

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Validate environment
        run: pnpm -w env-validate
      
      - name: Run linting
        run: pnpm lint
      
      - name: Run type checking
        run: pnpm type-check

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vulcan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install backend dependencies
        working-directory: ./apps/backend
        run: uv sync
      
      - name: Run backend tests
        working-directory: ./apps/backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vulcan_test
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key
          FIRST_SUPERUSER: admin@test.com
          FIRST_SUPERUSER_PASSWORD: testpassword
        run: |
          uv run alembic upgrade head
          uv run pytest --cov=app --cov-report=xml --cov-report=term-missing
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/backend/coverage.xml
          flags: backend
          token: ${{ secrets.CODECOV_TOKEN }}

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Validate environment
        run: pnpm -w env-validate
      
      - name: Run frontend tests
        working-directory: ./apps/frontend
        run: pnpm test:unit
      
      - name: Build frontend (with stats)
        working-directory: ./apps/frontend
        run: EXPORT_STATS=true pnpm build

      - name: Check frontend bundle size
        working-directory: ./apps/frontend
        env:
          BUNDLE_ROUTE: "/(dashboard)/planning"
          BUNDLE_BUDGET_KB: "220"
        run: pnpm check-bundle

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Install Playwright
        working-directory: ./apps/frontend
        run: npx playwright install --with-deps
      
      - name: Start services with Docker Compose
        run: |
          docker-compose up -d
          sleep 10
      
      - name: Run E2E tests
        working-directory: ./apps/frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
        run: npx playwright test
      
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: apps/frontend/playwright-report/
          retention-days: 30
      
      - name: Stop services
        if: always()
        run: docker-compose down

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test-backend, test-frontend]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/backend
          push: false
          tags: vulcan/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/frontend
          push: false
          tags: vulcan/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max